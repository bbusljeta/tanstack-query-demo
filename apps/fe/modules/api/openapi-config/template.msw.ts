/**
 * Generated by orval v6.19.1 🍺
 * Do not edit manually.
 * Template
 * Template API description
 * OpenAPI spec version: 1.0
 */
import { faker } from '@faker-js/faker';
import { rest } from 'msw';

export const getAccountsControllerCreateMock = () => ({
  avatarUrl: faker.word.sample(),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  email: faker.word.sample(),
  firstName: faker.word.sample(),
  id: faker.number.int({ min: undefined, max: undefined }),
  lastName: faker.word.sample(),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
});

export const getAccountsControllerFindAllMock = () => ({
  data: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => faker.word.sample()),
  page: faker.number.int({ min: undefined, max: undefined }),
  totalPages: faker.number.int({ min: undefined, max: undefined }),
  totalRows: faker.number.int({ min: undefined, max: undefined }),
});

export const getAccountsControllerFindOneMock = () => ({
  avatarUrl: faker.word.sample(),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  email: faker.word.sample(),
  firstName: faker.word.sample(),
  id: faker.number.int({ min: undefined, max: undefined }),
  lastName: faker.word.sample(),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
});

export const getAccountsControllerUpdateMock = () => ({
  avatarUrl: faker.word.sample(),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  email: faker.word.sample(),
  firstName: faker.word.sample(),
  id: faker.number.int({ min: undefined, max: undefined }),
  lastName: faker.word.sample(),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
});

export const getCompaniesControllerFindAllMock = () => ({
  cursor: faker.number.int({ min: undefined, max: undefined }),
  data: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => faker.word.sample()),
});

export const getTemplateMSW = () => [
  rest.post('*/v1/accounts', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getAccountsControllerCreateMock())
    );
  }),
  rest.get('*/v1/accounts', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getAccountsControllerFindAllMock())
    );
  }),
  rest.get('*/v1/accounts/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getAccountsControllerFindOneMock())
    );
  }),
  rest.patch('*/v1/accounts/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getAccountsControllerUpdateMock())
    );
  }),
  rest.delete('*/v1/accounts/:id', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.get('*/v1/companies', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getCompaniesControllerFindAllMock())
    );
  }),
];
