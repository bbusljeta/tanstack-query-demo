/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * Template
 * Template API description
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  AccountDto,
  AccountsControllerFindAllParams,
  CreateAccountDto,
  UpdateAccountDto,
} from '../openapi-schemas';
import { customClient } from '../custom-client';
import type { ErrorType, BodyType } from '../custom-client';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const accountsControllerCreate = (
  createAccountDto: BodyType<CreateAccountDto>,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<void>(
    {
      url: `/v1/accounts`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: createAccountDto,
    },
    options
  );
};

export const getAccountsControllerCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountsControllerCreate>>,
    TError,
    { data: BodyType<CreateAccountDto> },
    TContext
  >;
  request?: SecondParameter<typeof customClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof accountsControllerCreate>>,
  TError,
  { data: BodyType<CreateAccountDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof accountsControllerCreate>>,
    { data: BodyType<CreateAccountDto> }
  > = (props) => {
    const { data } = props ?? {};

    return accountsControllerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AccountsControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof accountsControllerCreate>>
>;
export type AccountsControllerCreateMutationBody = BodyType<CreateAccountDto>;
export type AccountsControllerCreateMutationError = ErrorType<unknown>;

export const useAccountsControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountsControllerCreate>>,
    TError,
    { data: BodyType<CreateAccountDto> },
    TContext
  >;
  request?: SecondParameter<typeof customClient>;
}) => {
  const mutationOptions = getAccountsControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const accountsControllerFindAll = (
  params: AccountsControllerFindAllParams,
  options?: SecondParameter<typeof customClient>,
  signal?: AbortSignal
) => {
  return customClient<AccountDto[]>(
    { url: `/v1/accounts`, method: 'get', params, signal },
    options
  );
};

export const getAccountsControllerFindAllQueryKey = (
  params: AccountsControllerFindAllParams
) => {
  return [`/v1/accounts`, ...(params ? [params] : [])] as const;
};

export const getAccountsControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof accountsControllerFindAll>>,
  TError = ErrorType<void>
>(
  params: AccountsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof accountsControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customClient>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAccountsControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof accountsControllerFindAll>>
  > = ({ signal }) => accountsControllerFindAll(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof accountsControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AccountsControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof accountsControllerFindAll>>
>;
export type AccountsControllerFindAllQueryError = ErrorType<void>;

export const useAccountsControllerFindAll = <
  TData = Awaited<ReturnType<typeof accountsControllerFindAll>>,
  TError = ErrorType<void>
>(
  params: AccountsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof accountsControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customClient>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAccountsControllerFindAllQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const accountsControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customClient>,
  signal?: AbortSignal
) => {
  return customClient<void>(
    { url: `/v1/accounts/${id}`, method: 'get', signal },
    options
  );
};

export const getAccountsControllerFindOneQueryKey = (id: string) => {
  return [`/v1/accounts/${id}`] as const;
};

export const getAccountsControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof accountsControllerFindOne>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof accountsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customClient>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAccountsControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof accountsControllerFindOne>>
  > = ({ signal }) => accountsControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof accountsControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AccountsControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof accountsControllerFindOne>>
>;
export type AccountsControllerFindOneQueryError = ErrorType<unknown>;

export const useAccountsControllerFindOne = <
  TData = Awaited<ReturnType<typeof accountsControllerFindOne>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof accountsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customClient>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAccountsControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const accountsControllerUpdate = (
  id: string,
  updateAccountDto: BodyType<UpdateAccountDto>,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<void>(
    {
      url: `/v1/accounts/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: updateAccountDto,
    },
    options
  );
};

export const getAccountsControllerUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountsControllerUpdate>>,
    TError,
    { id: string; data: BodyType<UpdateAccountDto> },
    TContext
  >;
  request?: SecondParameter<typeof customClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof accountsControllerUpdate>>,
  TError,
  { id: string; data: BodyType<UpdateAccountDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof accountsControllerUpdate>>,
    { id: string; data: BodyType<UpdateAccountDto> }
  > = (props) => {
    const { id, data } = props ?? {};

    return accountsControllerUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AccountsControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof accountsControllerUpdate>>
>;
export type AccountsControllerUpdateMutationBody = BodyType<UpdateAccountDto>;
export type AccountsControllerUpdateMutationError = ErrorType<unknown>;

export const useAccountsControllerUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountsControllerUpdate>>,
    TError,
    { id: string; data: BodyType<UpdateAccountDto> },
    TContext
  >;
  request?: SecondParameter<typeof customClient>;
}) => {
  const mutationOptions = getAccountsControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const accountsControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<void>(
    { url: `/v1/accounts/${id}`, method: 'delete' },
    options
  );
};

export const getAccountsControllerRemoveMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountsControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof accountsControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof accountsControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return accountsControllerRemove(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AccountsControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof accountsControllerRemove>>
>;

export type AccountsControllerRemoveMutationError = ErrorType<unknown>;

export const useAccountsControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountsControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customClient>;
}) => {
  const mutationOptions = getAccountsControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions);
};
